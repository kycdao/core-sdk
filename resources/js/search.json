[[{"l":"Getting started","p":["This SDK is designed to enable web3 projects to integrate kycDAO verification flow into their website with the maximum flexibility around UI/UX.","kycDAO JS/TS SDK canonical URL: https://github.com/kycdao/kycdao-js-sdk"]},{"l":"Integration steps","p":["Installation","The SDK can be used two ways:","by installing the NPM package","by embedding the browser compatible JavaScript code directly into HTML (with the help of a CDN service like jsDelivr)","When using the NPM package make sure to install the peer dependencies as well.","You can always find all versions and generate script tags for them at https://www.jsdelivr.com/package/npm/@kycdao/kycdao-sdk. We encourage using a specific version and checking for updates reqularly rather then defaulting to the latest version, to avoid potential compatibility issues.","Initialization","The SDK has an asynchronous initializer method which returns the SDK object as one of its fields which can be used to acccess the SDK methods. For details on the configuration options check out the API reference."]},{"l":"Integration example","p":["An example repository using the embedded method: https://github.com/kycdao/sdk-example"]}],[{"l":"Flows"},{"l":"EVM flow","p":["The main focus of this sequence diagram is to provide a better understanding on the required interaction between the SDK and the integrating host page. Communication between our services and certain third party providers are intentionally not detailed."]}],[{"l":"API reference","p":["@kycdao/kycdao-sdk - v0.6.4"]},{"l":"Table of contents"},{"l":"Enumerations","p":["BlockchainNetworks","Blockchains","EvmBlockchainNetworks","KycDaoEnvironments","NearBlockchainNetworks","SolanaBlockchainNetworks","StatusErrors","TransactionErrors","VerificationTypes","WalletErrors"]},{"l":"Classes","p":["ConfigurationError","InternalError","KycDao","KycDaoSDKError","StatusError","TransactionError","UnknownError","WalletError"]},{"l":"Interfaces","p":["BlockchainNetworkConfiguration","ChainAndAddress","Country","EmailData","KycDaoInitializationResult","MintingData","MintingResult","NetworkAndAddress","NftCheckOptions","NftCheckResponse","PersonaOptions","SdkConfiguration","SdkStatus","SentryConfiguration","ServerStatus","TokenMetadata","VerificationData","VerificationProviderOptions"]},{"l":"Type Aliases","p":["Blockchain","BlockchainNetwork","ErrorCode","EvmBlockchainNetwork","NearBlockchainNetwork","RedirectEvent","SolanaBlockchainNetwork","StatusErrorCode","TransactionErrorCode","VerificationStasusByType","VerificationType","WalletErrorCode"]},{"l":"Variables","p":["Countries"]},{"i":"type-aliases-1","l":"Type Aliases"},{"l":"Blockchain","p":["Ƭ Blockchain: keyof typeof Blockchains","Union type of string values of Blockchains."]},{"l":"Defined in","p":["types.ts:26"]},{"l":"BlockchainNetwork","p":["Ƭ BlockchainNetwork: keyof typeof BlockchainNetworks","Union type of string values of BlockchainNetworks."]},{"i":"defined-in-1","l":"Defined in","p":["types.ts:54"]},{"l":"ErrorCode","p":["Ƭ ErrorCode: TransactionErrorCode| StatusErrorCode| WalletErrorCode"]},{"i":"defined-in-2","l":"Defined in","p":["errors.ts:101"]},{"l":"EvmBlockchainNetwork","p":["Ƭ EvmBlockchainNetwork: keyof typeof EvmBlockchainNetworks","Union type of string values of EvmBlockchainNetworks."]},{"i":"defined-in-3","l":"Defined in","p":["types.ts:33"]},{"l":"NearBlockchainNetwork","p":["Ƭ NearBlockchainNetwork: keyof typeof NearBlockchainNetworks","Union type of string values of NearBlockchainNetworks."]},{"i":"defined-in-4","l":"Defined in","p":["types.ts:40"]},{"l":"RedirectEvent","p":["Ƭ RedirectEvent: NearLogin| NearMint| NearUserRejectedError","Possible events handled by the SDK during initialization after a redirect."]},{"i":"defined-in-5","l":"Defined in","p":["types.ts:117"]},{"l":"SolanaBlockchainNetwork","p":["Ƭ SolanaBlockchainNetwork: keyof typeof SolanaBlockchainNetworks","Union type of string values of SolanaBlockchainNetworks."]},{"i":"defined-in-6","l":"Defined in","p":["types.ts:47"]},{"l":"StatusErrorCode","p":["Ƭ StatusErrorCode: keyof typeof StatusErrors"]},{"i":"defined-in-7","l":"Defined in","p":["errors.ts:98"]},{"l":"TransactionErrorCode","p":["Ƭ TransactionErrorCode: keyof typeof TransactionErrors"]},{"i":"defined-in-8","l":"Defined in","p":["errors.ts:99"]},{"l":"VerificationStasusByType","p":["Ƭ VerificationStasusByType: Partial< Record< VerificationType, boolean>>","Type for representing verified status for possible verification types with a boolean flag."]},{"i":"defined-in-9","l":"Defined in","p":["types.ts:105"]},{"l":"VerificationType","p":["Ƭ VerificationType: keyof typeof VerificationTypes","Union type of string values of VerificationTypes."]},{"i":"defined-in-10","l":"Defined in","p":["types.ts:98"]},{"l":"WalletErrorCode","p":["Ƭ WalletErrorCode: keyof typeof WalletErrors"]},{"i":"defined-in-11","l":"Defined in","p":["errors.ts:97"]},{"i":"variables-1","l":"Variables"},{"l":"Countries","p":["• Const Countries: Country[]","The list of countries recognized by the SDK with their respective ISO codes."]},{"i":"defined-in-12","l":"Defined in","p":["index.ts:187"]}],[{"l":"ConfigurationError","p":["@kycdao/kycdao-sdk - v0.6.4/ ConfigurationError","This error class represents the errors that can occur when the SDK evaluates its configuration.","These errors intend to guide you to fix configuration problems while integrating the SDK. They should not occur in normal circumstances. The errorCode property is always undefined for these errors, the message property contains the error description."]},{"l":"Hierarchy","p":["KycDaoSDKError","↳ ConfigurationError"]},{"l":"Table of contents"},{"l":"Constructors","p":["constructor"]},{"l":"Properties","p":["referenceId"]},{"l":"Accessors","p":["errorCode"]},{"l":"Methods","p":["toString"]},{"i":"constructors-1","l":"Constructors"},{"l":"constructor","p":["• new ConfigurationError( message)"]},{"l":"Parameters","p":["Name","Type","message","string"]},{"l":"Overrides","p":["KycDaoSDKError. constructor"]},{"l":"Defined in","p":["errors.ts:160"]},{"i":"properties-1","l":"Properties"},{"l":"referenceId","p":["• referenceId: string","This is a unique reference to the error that can help us identify and solve the issue."]},{"l":"Inherited from","p":["KycDaoSDKError. referenceId"]},{"i":"defined-in-1","l":"Defined in","p":["errors.ts:127"]},{"i":"accessors-1","l":"Accessors"},{"l":"errorCode","p":["• get errorCode(): undefined","Error code is always undefined for this subclass"]},{"l":"Returns","p":["undefined"]},{"i":"overrides-1","l":"Overrides","p":["KycDaoSDKError.errorCode"]},{"i":"defined-in-2","l":"Defined in","p":["errors.ts:166"]},{"i":"methods-1","l":"Methods"},{"l":"toString","p":["▸ toString(): string"]},{"i":"returns-1","l":"Returns","p":["string"]},{"i":"inherited-from-1","l":"Inherited from","p":["KycDaoSDKError. toString"]},{"i":"defined-in-3","l":"Defined in","p":["errors.ts:138"]}],[{"l":"InternalError","p":["@kycdao/kycdao-sdk - v0.6.4/ InternalError","This error class represents errors that can occur independently from the SDK state. They can be caused by network issues, unstable RPC endpoints, errors in the SDK, etc.","The errorCode property is always undefined for these error, the message property contains the error description.*"]},{"l":"Hierarchy","p":["KycDaoSDKError","↳ InternalError"]},{"l":"Table of contents"},{"l":"Constructors","p":["constructor"]},{"l":"Properties","p":["referenceId"]},{"l":"Accessors","p":["errorCode"]},{"l":"Methods","p":["toString"]},{"i":"constructors-1","l":"Constructors"},{"l":"constructor","p":["• new InternalError( message, referenceId?)"]},{"l":"Parameters","p":["Name","Type","message","string","referenceId?"]},{"l":"Overrides","p":["KycDaoSDKError. constructor"]},{"l":"Defined in","p":["errors.ts:250"]},{"i":"properties-1","l":"Properties"},{"l":"referenceId","p":["• referenceId: string","This is a unique reference to the error that can help us identify and solve the issue."]},{"l":"Inherited from","p":["KycDaoSDKError. referenceId"]},{"i":"defined-in-1","l":"Defined in","p":["errors.ts:127"]},{"i":"accessors-1","l":"Accessors"},{"l":"errorCode","p":["• get errorCode(): undefined","Error code is always undefined for this subclass"]},{"l":"Returns","p":["undefined"]},{"i":"overrides-1","l":"Overrides","p":["KycDaoSDKError.errorCode"]},{"i":"defined-in-2","l":"Defined in","p":["errors.ts:256"]},{"i":"methods-1","l":"Methods"},{"l":"toString","p":["▸ toString(): string"]},{"i":"returns-1","l":"Returns","p":["string"]},{"i":"inherited-from-1","l":"Inherited from","p":["KycDaoSDKError. toString"]},{"i":"defined-in-3","l":"Defined in","p":["errors.ts:138"]}],[{"l":"KycDao","p":["@kycdao/kycdao-sdk - v0.6.4/ KycDao","This class provides the connection to a kycDAO server, initiates flows with third party providers (for wallet connection, verification, etc.) and handles responses and redirects from them."]},{"l":"Hierarchy","p":["ApiBase","↳ KycDao"]},{"l":"Table of contents"},{"l":"Accessors","p":["baseUrl","connectedWallet","loggedIn","sdkStatus","subscribed","walletConnected"]},{"l":"Methods","p":["checkEmailConfirmed","checkProviderNetwork","checkVerificationStatus","checkVerifiedNetworks","connectWallet","disconnectWallet","getNftImageOptions","getNftImageUrl","getServerStatus","getValidNfts","hasValidNft","initialize","regenerateNftImage","regenerateNftImageOptions","registerOrLogin","resendEmailConfirmationCode","startMinting","startVerification","switchProviderNetwork","updateEmail"]},{"i":"accessors-1","l":"Accessors"},{"l":"baseUrl","p":["• get baseUrl(): string","Returns the base URL of the configured kycDAO server."]},{"l":"Returns","p":["string"]},{"l":"Inherited from","p":["ApiBase.baseUrl"]},{"l":"Defined in","p":["api-base.ts:34"]},{"l":"connectedWallet","p":["• get connectedWallet(): undefined| ChainAndAddress","Returns the connected wallet if there is any."]},{"i":"returns-1","l":"Returns","p":["undefined| ChainAndAddress"]},{"i":"defined-in-1","l":"Defined in","p":["index.ts:238"]},{"l":"loggedIn","p":["• get loggedIn(): boolean","Returns if there is a user currently logged in."]},{"i":"returns-2","l":"Returns","p":["boolean"]},{"i":"defined-in-2","l":"Defined in","p":["index.ts:261"]},{"l":"sdkStatus","p":["• get sdkStatus(): SdkStatus","Returns the current status of the SDK."]},{"i":"returns-3","l":"Returns","p":["SdkStatus"]},{"i":"defined-in-3","l":"Defined in","p":["index.ts:220"]},{"l":"subscribed","p":["• get subscribed(): boolean","Returns if the current user has a kycDAO subscription. Requires a logged in user."]},{"i":"returns-4","l":"Returns","p":["boolean"]},{"i":"defined-in-4","l":"Defined in","p":["index.ts:271"]},{"l":"walletConnected","p":["• get walletConnected(): boolean","Returns if there is a wallet currently connected."]},{"i":"returns-5","l":"Returns","p":["boolean"]},{"i":"defined-in-5","l":"Defined in","p":["index.ts:248"]},{"i":"methods-1","l":"Methods"},{"l":"checkEmailConfirmed","p":["▸ checkEmailConfirmed(): Promise< EmailData>","This method can be used to poll the server, refreshing the user session and checking for the user's email verification status. Requires a logged in user.","Async"]},{"i":"returns-6","l":"Returns","p":["Promise< EmailData>"]},{"i":"defined-in-6","l":"Defined in","p":["index.ts:1629"]},{"l":"checkProviderNetwork","p":["▸ checkProviderNetwork(): Promise< CeloAlfajores| CeloMainnet| EthereumGoerli| EthereumMainnet| PolygonMainnet| PolygonMumbai| NearMainnet| NearTestnet| SolanaDevnet| SolanaMainnet| SolanaTestnet>","Checks if the currently connected wallet's provider has a supported and enabled network selected as active. If yes, it returns the active network, otherwise it throws an error.","Async"]},{"i":"returns-7","l":"Returns","p":["Promise< CeloAlfajores| CeloMainnet| EthereumGoerli| EthereumMainnet| PolygonMainnet| PolygonMumbai| NearMainnet| NearTestnet| SolanaDevnet| SolanaMainnet| SolanaTestnet>"]},{"i":"defined-in-7","l":"Defined in","p":["index.ts:1305"]},{"l":"checkVerificationStatus","p":["▸ checkVerificationStatus(): Promise< Partial< Record< AccreditedInvestor| KYC, boolean>>>","This method can be used to poll the server, refreshing the user session and checking for the user's verification status. Requires a logged in user.","Async","See","VerificationTypes"]},{"i":"returns-8","l":"Returns","p":["Promise< Partial< Record< AccreditedInvestor| KYC, boolean>>>"]},{"i":"defined-in-8","l":"Defined in","p":["index.ts:1767"]},{"l":"checkVerifiedNetworks","p":["▸ checkVerifiedNetworks( verificationType, options?): Promise< NftCheckResponse[]>","Returns a list of NFT check responses where each element of the list is the response to a check performed on a different blockchain network. The list of networks is selected from the available networks with the blockchain of the provided (or the currently connected) wallet. If the provided/connected wallet is on a main network the resulting list will only include main networks and if it's on a dev/test network the list will only include dev/test networks.","Remarks","Security note: The result of this request is prone to client side manipulation. For maximum security add the verification check directly to your smart contract or use server side verification.","Async"]},{"l":"Parameters","p":["Name","Type","verificationType","AccreditedInvestor| KYC","options?","NftCheckOptions"]},{"i":"returns-9","l":"Returns","p":["Promise< NftCheckResponse[]>"]},{"i":"defined-in-9","l":"Defined in","p":["index.ts:1142"]},{"l":"connectWallet","p":["▸ connectWallet( blockchain): Promise< void>","Initiates wallet connection with a third party wallet provider.","Async","See","Blockchains"]},{"i":"parameters-1","l":"Parameters","p":["Name","Type","blockchain","Ethereum| Near| Solana"]},{"i":"returns-10","l":"Returns","p":["Promise< void>"]},{"i":"defined-in-10","l":"Defined in","p":["index.ts:1389"]},{"l":"disconnectWallet","p":["▸ disconnectWallet(): Promise< void>","Disconnects the currently connected wallet (from the current domain). Only works with NEAR wallets, can be used before connectWallet to allow connecting a new NEAR wallet instead of a previously connected one.","Async"]},{"i":"returns-11","l":"Returns","p":["Promise< void>"]},{"i":"defined-in-11","l":"Defined in","p":["index.ts:1486"]},{"l":"getNftImageOptions","p":["▸ getNftImageOptions(): Promise<{ [imageId: string]: string; }>","This method returns multiple NFT image options currently available for the logged in user. The keys of the returned object are the image IDs. One of these can be passed in as part of the MintingData parameter of the startMinting method to select the desired NFT image."]},{"i":"returns-12","l":"Returns","p":["Promise<{ [imageId: string]: string; }>"]},{"i":"defined-in-12","l":"Defined in","p":["index.ts:1818"]},{"l":"getNftImageUrl","p":["▸ getNftImageUrl(): string","Returns the URL of the identicon that will be saved into the next minted NFT for the current user. The URL is static and always returns the currently generated image for the user.","Deprecated","since version 0.3.8, use getNftImageOptions instead to get multiple NFT image options to select from."]},{"i":"returns-13","l":"Returns","p":["string"]},{"i":"defined-in-13","l":"Defined in","p":["index.ts:1792"]},{"l":"getServerStatus","p":["▸ getServerStatus(): Promise< ServerStatus>","A test method to check configuration and kycDAO server access.","Async"]},{"i":"returns-14","l":"Returns","p":["Promise< ServerStatus>"]},{"i":"defined-in-14","l":"Defined in","p":["index.ts:1004"]},{"l":"getValidNfts","p":["▸ getValidNfts( verificationType, options?): Promise< NftCheckResponse>","Queries the valid tokens of the provided (or the currently connected) wallet.","Remarks","Security note: The result of this request is prone to client side manipulation. For maximum security add the verification check directly to your smart contract or use server side verification.","Async"]},{"i":"parameters-2","l":"Parameters","p":["Name","Type","verificationType","AccreditedInvestor| KYC","options?","NftCheckOptions"]},{"i":"returns-15","l":"Returns","p":["Promise< NftCheckResponse>"]},{"i":"defined-in-15","l":"Defined in","p":["index.ts:1118"]},{"l":"hasValidNft","p":["▸ hasValidNft( verificationType, options?): Promise< boolean>","Checks on chain if the provided (or the currently connected) wallet has a valid kycNFT.","Remarks","Security note: The result of this request is prone to client side manipulation. For maximum security add the verification check directly to your smart contract or use server side verification.","Async"]},{"i":"parameters-3","l":"Parameters","p":["Name","Type","verificationType","AccreditedInvestor| KYC","options?","NftCheckOptions"]},{"i":"returns-16","l":"Returns","p":["Promise< boolean>"]},{"i":"defined-in-16","l":"Defined in","p":["index.ts:1095"]},{"l":"regenerateNftImage","p":["▸ regenerateNftImage(): Promise< void>","This method generates a new identicon for the user.","Deprecated","since version 0.3.8, use regenerateNftImageOptions instead to regenerate and all NFT image options.","Remark","The image URL is static so it has to be force-reloaded after the change.","Async"]},{"i":"returns-17","l":"Returns","p":["Promise< void>"]},{"i":"defined-in-17","l":"Defined in","p":["index.ts:1806"]},{"l":"regenerateNftImageOptions","p":["▸ regenerateNftImageOptions(): Promise<{ [imageId: string]: string; }>","This method regenerates and returns a new set of NFT image options currently available for the logged in user. For more information see the getNftImageOptions method.","Async"]},{"i":"returns-18","l":"Returns","p":["Promise<{ [imageId: string]: string; }>"]},{"i":"defined-in-18","l":"Defined in","p":["index.ts:1842"]},{"l":"registerOrLogin","p":["▸ registerOrLogin(): Promise< void>","This method creates a session and user for the connected wallet, or log them in. A session cookie will be saved in the browser.","Remarks","Ideally this method shouldn't be called repeatedly in quick succession (before the previous call got resolved) because in case of new wallets/users the registration logic will be triggered multiple times and every call after the first one will result in an error. For the same reason, error handling is advised.","Async"]},{"i":"returns-19","l":"Returns","p":["Promise< void>"]},{"i":"defined-in-19","l":"Defined in","p":["index.ts:1537"]},{"l":"resendEmailConfirmationCode","p":["▸ resendEmailConfirmationCode(): Promise< void>","This method will resend the email verification code to the email address that was last set for the user.","Note: This call is limited to 1 per minute and 5 per address for every user to avoid spamming. When these limits are reached the method will throw an error. It will also throw an error if an email address is not set yet or if it has been already verified.","Async"]},{"i":"returns-20","l":"Returns","p":["Promise< void>"]},{"i":"defined-in-20","l":"Defined in","p":["index.ts:1656"]},{"l":"startMinting","p":["▸ startMinting( mintingData): Promise< undefined| MintingResult>","This step updates the user based on the MintingData provided and checks if the user is eligible to mint a token. Then calls the server to authorize minting for the current wallet and waits for the transaction to succeed (but max about 2 minutes). After an authorization code is acquired it initiates the minting.","Returns data related to the successful mint transaction and the minted token, if it's possible. In general it should always return this data unless an error occured or the site got redirected by the provider (e.g. NEAR).","In case of an error, based on the type of the error startMinting can be called again with the same MintingData to retry minting or it can be used to start a completely new minting flow with new values. Some properties of MintingData like the imageId need to be unique for every minting flow, so when a non-retriable error occurs make sure to call startMinting with new unique values.","Async"]},{"i":"parameters-4","l":"Parameters","p":["Name","Type","mintingData"]},{"i":"returns-21","l":"Returns","p":["Promise< undefined| MintingResult>"]},{"i":"defined-in-21","l":"Defined in","p":["index.ts:2059"]},{"l":"startVerification","p":["▸ startVerification( verificationData, providerOptions?): Promise< void>","This method updates the user with data provided in VerificationData and then starts a verification flow with the approrpiate third party provider.","Async"]},{"i":"parameters-5","l":"Parameters","p":["Name","Type","verificationData","providerOptions?","VerificationProviderOptions"]},{"i":"returns-22","l":"Returns","p":["Promise< void>"]},{"i":"defined-in-22","l":"Defined in","p":["index.ts:1732"]},{"l":"switchProviderNetwork","p":["▸ switchProviderNetwork( blockchainNetwork): Promise< void>","Tries to switch the active network in the connected wallet's provider. This will usually porompt the user to authorize the switch. Returns an error if the switch was unsuccessful.","Async"]},{"i":"parameters-6","l":"Parameters","p":["Name","Type","blockchainNetwork","CeloAlfajores| CeloMainnet| EthereumGoerli| EthereumMainnet| PolygonMainnet| PolygonMumbai| NearMainnet| NearTestnet| SolanaDevnet| SolanaMainnet| SolanaTestnet"]},{"i":"returns-23","l":"Returns","p":["Promise< void>"]},{"i":"defined-in-23","l":"Defined in","p":["index.ts:1323"]},{"l":"updateEmail","p":["▸ updateEmail( email): Promise< void>","This method updates the active email address of the current user.","Async"]},{"i":"parameters-7","l":"Parameters","p":["Name","Type","email","string"]},{"i":"returns-24","l":"Returns","p":["Promise< void>"]},{"i":"defined-in-24","l":"Defined in","p":["index.ts:1612"]},{"l":"initialize","p":["▸ Static initialize( config): Promise< KycDaoInitializationResult>","Connect to a kycDAO server and initialize the SDK using the provided configuration.","Static","Async"]},{"i":"parameters-8","l":"Parameters","p":["Name","Type","config","SdkConfiguration"]},{"i":"returns-25","l":"Returns","p":["Promise< KycDaoInitializationResult>"]},{"i":"defined-in-25","l":"Defined in","p":["index.ts:913"]}],[{"l":"KycDaoSDKError","p":["@kycdao/kycdao-sdk - v0.6.4/ KycDaoSDKError","The abstract class of all the error classes returned by SDK methods.","Subclasses represent various error types:","Integration errors:","ConfigurationError","Runtime errors (to be handled by the client):","StatusError","WalletError","TransactionError","Unexpected errors (not to be handled by the client):","InternalError","UnknownError"]},{"l":"Hierarchy","p":["Error","↳ KycDaoSDKError","↳↳ ConfigurationError","↳↳ StatusError","↳↳ WalletError","↳↳ TransactionError","↳↳ InternalError","↳↳ UnknownError"]},{"l":"Table of contents"},{"l":"Constructors","p":["constructor"]},{"l":"Properties","p":["referenceId"]},{"l":"Accessors","p":["errorCode"]},{"l":"Methods","p":["toString"]},{"i":"constructors-1","l":"Constructors"},{"l":"constructor","p":["• new KycDaoSDKError( errorCode, message, referenceId?)"]},{"l":"Parameters","p":["Name","Type","errorCode","undefined| ErrorCode","message","string","referenceId?"]},{"l":"Overrides","p":["Error.constructor"]},{"l":"Defined in","p":["errors.ts:131"]},{"i":"properties-1","l":"Properties"},{"l":"referenceId","p":["• referenceId: string","This is a unique reference to the error that can help us identify and solve the issue."]},{"i":"defined-in-1","l":"Defined in","p":["errors.ts:127"]},{"i":"accessors-1","l":"Accessors"},{"l":"errorCode","p":["• get errorCode(): undefined| ErrorCode","Some subclasses contain an error code. The accessor here is provided for convenience"]},{"l":"Returns","p":["undefined| ErrorCode"]},{"i":"defined-in-2","l":"Defined in","p":["errors.ts:145"]},{"i":"methods-1","l":"Methods"},{"l":"toString","p":["▸ toString(): string"]},{"i":"returns-1","l":"Returns","p":["string"]},{"i":"defined-in-3","l":"Defined in","p":["errors.ts:138"]}],[{"l":"StatusError","p":["@kycdao/kycdao-sdk - v0.6.4/ StatusError","This error class represents the various errors that can occur when interacting with the SDK while some preconditions are not met.","The errorCode property can be used to identify the specific error. See StatusErrors for the list of possible errors."]},{"l":"Hierarchy","p":["KycDaoSDKError","↳ StatusError"]},{"l":"Table of contents"},{"l":"Constructors","p":["constructor"]},{"l":"Properties","p":["referenceId"]},{"l":"Accessors","p":["errorCode"]},{"l":"Methods","p":["toString"]},{"i":"constructors-1","l":"Constructors"},{"l":"constructor","p":["• new StatusError( errorCode, message?)"]},{"l":"Parameters","p":["Name","Type","errorCode","UserNotLoggedIn| InvalidEmailAddress| InvalidTaxResidency| TermsAndConditionsNotAccepted| DisclaimerNotAccepted| WalletNotConnected| UserNotVerified| UserAlreadyVerified| NetworkNotSupported| NetworkNotEnabled| NetworkSwitchingFailed","message?","string"]},{"l":"Overrides","p":["KycDaoSDKError. constructor"]},{"l":"Defined in","p":["errors.ts:180"]},{"i":"properties-1","l":"Properties"},{"l":"referenceId","p":["• referenceId: string","This is a unique reference to the error that can help us identify and solve the issue."]},{"l":"Inherited from","p":["KycDaoSDKError. referenceId"]},{"i":"defined-in-1","l":"Defined in","p":["errors.ts:127"]},{"i":"accessors-1","l":"Accessors"},{"l":"errorCode","p":["• get errorCode(): UserNotLoggedIn| InvalidEmailAddress| InvalidTaxResidency| TermsAndConditionsNotAccepted| DisclaimerNotAccepted| WalletNotConnected| UserNotVerified| UserAlreadyVerified| NetworkNotSupported| NetworkNotEnabled| NetworkSwitchingFailed","Error code represents various subtypes of the error, see StatusErrors for details."]},{"l":"Returns","p":["UserNotLoggedIn| InvalidEmailAddress| InvalidTaxResidency| TermsAndConditionsNotAccepted| DisclaimerNotAccepted| WalletNotConnected| UserNotVerified| UserAlreadyVerified| NetworkNotSupported| NetworkNotEnabled| NetworkSwitchingFailed"]},{"i":"overrides-1","l":"Overrides","p":["KycDaoSDKError.errorCode"]},{"i":"defined-in-2","l":"Defined in","p":["errors.ts:189"]},{"i":"methods-1","l":"Methods"},{"l":"toString","p":["▸ toString(): string"]},{"i":"returns-1","l":"Returns","p":["string"]},{"i":"inherited-from-1","l":"Inherited from","p":["KycDaoSDKError. toString"]},{"i":"defined-in-3","l":"Defined in","p":["errors.ts:138"]}],[{"l":"TransactionError","p":["@kycdao/kycdao-sdk - v0.6.4/ TransactionError","This error class represents the various errors that can occur during the minting transaction.","The errorCode property can be used to identify the specific error. See TransactionErrors for the list of possible problems."]},{"l":"Hierarchy","p":["KycDaoSDKError","↳ TransactionError"]},{"l":"Table of contents"},{"l":"Constructors","p":["constructor"]},{"l":"Properties","p":["referenceId"]},{"l":"Accessors","p":["errorCode"]},{"l":"Methods","p":["toString"]},{"i":"constructors-1","l":"Constructors"},{"l":"constructor","p":["• new TransactionError( errorCode, message?)"]},{"l":"Parameters","p":["Name","Type","errorCode","TransactionNotFound| TransactionFailed| TransactionRejected| MintingCostCalculationError| GasEstimationError","message?","string"]},{"l":"Overrides","p":["KycDaoSDKError. constructor"]},{"l":"Defined in","p":["errors.ts:227"]},{"i":"properties-1","l":"Properties"},{"l":"referenceId","p":["• referenceId: string","This is a unique reference to the error that can help us identify and solve the issue."]},{"l":"Inherited from","p":["KycDaoSDKError. referenceId"]},{"i":"defined-in-1","l":"Defined in","p":["errors.ts:127"]},{"i":"accessors-1","l":"Accessors"},{"l":"errorCode","p":["• get errorCode(): TransactionNotFound| TransactionFailed| TransactionRejected| MintingCostCalculationError| GasEstimationError","Error code represents various subtypes of the error, see TransactionErrors for details."]},{"l":"Returns","p":["TransactionNotFound| TransactionFailed| TransactionRejected| MintingCostCalculationError| GasEstimationError"]},{"i":"overrides-1","l":"Overrides","p":["KycDaoSDKError.errorCode"]},{"i":"defined-in-2","l":"Defined in","p":["errors.ts:236"]},{"i":"methods-1","l":"Methods"},{"l":"toString","p":["▸ toString(): string"]},{"i":"returns-1","l":"Returns","p":["string"]},{"i":"inherited-from-1","l":"Inherited from","p":["KycDaoSDKError. toString"]},{"i":"defined-in-3","l":"Defined in","p":["errors.ts:138"]}],[{"l":"UnknownError","p":["@kycdao/kycdao-sdk - v0.6.4/ UnknownError","This error class represents errors that can occur because of some unexpected behavior of the SDK.","The errorCode property is always undefined for these error, the message property contains the error description."]},{"l":"Hierarchy","p":["KycDaoSDKError","↳ UnknownError"]},{"l":"Table of contents"},{"l":"Constructors","p":["constructor"]},{"l":"Properties","p":["referenceId"]},{"l":"Accessors","p":["errorCode"]},{"l":"Methods","p":["toString"]},{"i":"constructors-1","l":"Constructors"},{"l":"constructor","p":["• new UnknownError( message)"]},{"l":"Parameters","p":["Name","Type","message","string"]},{"l":"Overrides","p":["KycDaoSDKError. constructor"]},{"l":"Defined in","p":["errors.ts:278"]},{"i":"properties-1","l":"Properties"},{"l":"referenceId","p":["• referenceId: string","This is a unique reference to the error that can help us identify and solve the issue."]},{"l":"Inherited from","p":["KycDaoSDKError. referenceId"]},{"i":"defined-in-1","l":"Defined in","p":["errors.ts:127"]},{"i":"accessors-1","l":"Accessors"},{"l":"errorCode","p":["• get errorCode(): undefined","Error code is always undefined for this subclass"]},{"l":"Returns","p":["undefined"]},{"i":"overrides-1","l":"Overrides","p":["KycDaoSDKError.errorCode"]},{"i":"defined-in-2","l":"Defined in","p":["errors.ts:284"]},{"i":"methods-1","l":"Methods"},{"l":"toString","p":["▸ toString(): string"]},{"i":"returns-1","l":"Returns","p":["string"]},{"i":"inherited-from-1","l":"Inherited from","p":["KycDaoSDKError. toString"]},{"i":"defined-in-3","l":"Defined in","p":["errors.ts:138"]}],[{"l":"WalletError","p":["@kycdao/kycdao-sdk - v0.6.4/ WalletError","This error class represents the various errors that can occur when the SDK is interacting with a wallet.","The errorCode property can be used to identify the specific error. See WalletErrors for the list of possible problems."]},{"l":"Hierarchy","p":["KycDaoSDKError","↳ WalletError"]},{"l":"Table of contents"},{"l":"Constructors","p":["constructor"]},{"l":"Properties","p":["errorCodeFromWallet","referenceId"]},{"l":"Accessors","p":["errorCode"]},{"l":"Methods","p":["toString"]},{"i":"constructors-1","l":"Constructors"},{"l":"constructor","p":["• new WalletError( errorCode, message, errorCodeFromWallet)"]},{"l":"Parameters","p":["Name","Type","errorCode","UserNotConnected| AccountUnauthorized| RejectedByUser| InsufficientFunds| InternalWalletError| ChainMissing","message","string","errorCodeFromWallet","number"]},{"l":"Overrides","p":["KycDaoSDKError. constructor"]},{"l":"Defined in","p":["errors.ts:203"]},{"i":"properties-1","l":"Properties"},{"l":"errorCodeFromWallet","p":["• errorCodeFromWallet: number"]},{"i":"defined-in-1","l":"Defined in","p":["errors.ts:202"]},{"l":"referenceId","p":["• referenceId: string","This is a unique reference to the error that can help us identify and solve the issue."]},{"l":"Inherited from","p":["KycDaoSDKError. referenceId"]},{"i":"defined-in-2","l":"Defined in","p":["errors.ts:127"]},{"i":"accessors-1","l":"Accessors"},{"l":"errorCode","p":["• get errorCode(): UserNotConnected| AccountUnauthorized| RejectedByUser| InsufficientFunds| InternalWalletError| ChainMissing","Error code represents various subtypes of the error, see WalletErrors for details."]},{"l":"Returns","p":["UserNotConnected| AccountUnauthorized| RejectedByUser| InsufficientFunds| InternalWalletError| ChainMissing"]},{"i":"overrides-1","l":"Overrides","p":["KycDaoSDKError.errorCode"]},{"i":"defined-in-3","l":"Defined in","p":["errors.ts:210"]},{"i":"methods-1","l":"Methods"},{"l":"toString","p":["▸ toString(): string"]},{"i":"returns-1","l":"Returns","p":["string"]},{"i":"overrides-2","l":"Overrides","p":["KycDaoSDKError. toString"]},{"i":"defined-in-4","l":"Defined in","p":["errors.ts:214"]}],[{"l":"BlockchainNetworks","p":["@kycdao/kycdao-sdk - v0.6.4/ BlockchainNetworks","Collection of supported blockchain networks."]},{"l":"Table of contents"},{"l":"Enumeration Members","p":["CeloAlfajores","CeloMainnet","EthereumGoerli","EthereumMainnet","NearMainnet","NearTestnet","PolygonMainnet","PolygonMumbai","SolanaDevnet","SolanaMainnet","SolanaTestnet"]},{"i":"enumeration-members-1","l":"Enumeration Members"},{"l":"CeloAlfajores","p":["• CeloAlfajores= CeloAlfajores"]},{"l":"Defined in","p":["constants.ts:21"]},{"l":"CeloMainnet","p":["• CeloMainnet= CeloMainnet"]},{"i":"defined-in-1","l":"Defined in","p":["constants.ts:22"]},{"l":"EthereumGoerli","p":["• EthereumGoerli= EthereumGoerli"]},{"i":"defined-in-2","l":"Defined in","p":["constants.ts:23"]},{"l":"EthereumMainnet","p":["• EthereumMainnet= EthereumMainnet"]},{"i":"defined-in-3","l":"Defined in","p":["constants.ts:24"]},{"l":"NearMainnet","p":["• NearMainnet= NearMainnet"]},{"i":"defined-in-4","l":"Defined in","p":["constants.ts:35"]},{"l":"NearTestnet","p":["• NearTestnet= NearTestnet"]},{"i":"defined-in-5","l":"Defined in","p":["constants.ts:36"]},{"l":"PolygonMainnet","p":["• PolygonMainnet= PolygonMainnet"]},{"i":"defined-in-6","l":"Defined in","p":["constants.ts:25"]},{"l":"PolygonMumbai","p":["• PolygonMumbai= PolygonMumbai"]},{"i":"defined-in-7","l":"Defined in","p":["constants.ts:26"]},{"l":"SolanaDevnet","p":["• SolanaDevnet= SolanaDevnet"]},{"i":"defined-in-8","l":"Defined in","p":["constants.ts:45"]},{"l":"SolanaMainnet","p":["• SolanaMainnet= SolanaMainnet"]},{"i":"defined-in-9","l":"Defined in","p":["constants.ts:46"]},{"l":"SolanaTestnet","p":["• SolanaTestnet= SolanaTestnet"]},{"i":"defined-in-10","l":"Defined in","p":["constants.ts:47"]}],[{"l":"Blockchains","p":["@kycdao/kycdao-sdk - v0.6.4/ Blockchains","Collection of supported blockchains."]},{"l":"Table of contents"},{"l":"Enumeration Members","p":["Ethereum","Near","Solana"]},{"i":"enumeration-members-1","l":"Enumeration Members"},{"l":"Ethereum","p":["• Ethereum= Ethereum"]},{"l":"Defined in","p":["constants.ts:10"]},{"l":"Near","p":["• Near= Near"]},{"i":"defined-in-1","l":"Defined in","p":["constants.ts:11"]},{"l":"Solana","p":["• Solana= Solana"]},{"i":"defined-in-2","l":"Defined in","p":["constants.ts:12"]}],[{"l":"EvmBlockchainNetworks","p":["@kycdao/kycdao-sdk - v0.6.4/ EvmBlockchainNetworks","Collection of supported EVM blockchain networks."]},{"l":"Table of contents"},{"l":"Enumeration Members","p":["CeloAlfajores","CeloMainnet","EthereumGoerli","EthereumMainnet","PolygonMainnet","PolygonMumbai"]},{"i":"enumeration-members-1","l":"Enumeration Members"},{"l":"CeloAlfajores","p":["• CeloAlfajores= CeloAlfajores"]},{"l":"Defined in","p":["constants.ts:21"]},{"l":"CeloMainnet","p":["• CeloMainnet= CeloMainnet"]},{"i":"defined-in-1","l":"Defined in","p":["constants.ts:22"]},{"l":"EthereumGoerli","p":["• EthereumGoerli= EthereumGoerli"]},{"i":"defined-in-2","l":"Defined in","p":["constants.ts:23"]},{"l":"EthereumMainnet","p":["• EthereumMainnet= EthereumMainnet"]},{"i":"defined-in-3","l":"Defined in","p":["constants.ts:24"]},{"l":"PolygonMainnet","p":["• PolygonMainnet= PolygonMainnet"]},{"i":"defined-in-4","l":"Defined in","p":["constants.ts:25"]},{"l":"PolygonMumbai","p":["• PolygonMumbai= PolygonMumbai"]},{"i":"defined-in-5","l":"Defined in","p":["constants.ts:26"]}],[{"l":"KycDaoEnvironments","p":["@kycdao/kycdao-sdk - v0.6.4/ KycDaoEnvironments","Deprecated","since version 0.1.3","Collection of available environment types for initializing the SDK."]},{"l":"Table of contents"},{"l":"Enumeration Members","p":["demo","test"]},{"i":"enumeration-members-1","l":"Enumeration Members"},{"l":"demo","p":["• demo= demo","Demo mode is intended to be more conveninet for demonstrating (and also developing) the integration with kycDAO. Compared to the test mode it removes some verification and minting restrictions so the same wallet/user can be used multiple times to start/finish the flows."]},{"l":"Defined in","p":["constants.ts:194"]},{"l":"test","p":["• test= test","Test mode is intended to behave the same way as production but using test/sandbox servers and services of third party providers."]},{"i":"defined-in-1","l":"Defined in","p":["constants.ts:198"]}],[{"l":"NearBlockchainNetworks","p":["@kycdao/kycdao-sdk - v0.6.4/ NearBlockchainNetworks","Collection of supported NEAR blockchain networks."]},{"l":"Table of contents"},{"l":"Enumeration Members","p":["NearMainnet","NearTestnet"]},{"i":"enumeration-members-1","l":"Enumeration Members"},{"l":"NearMainnet","p":["• NearMainnet= NearMainnet"]},{"l":"Defined in","p":["constants.ts:35"]},{"l":"NearTestnet","p":["• NearTestnet= NearTestnet"]},{"i":"defined-in-1","l":"Defined in","p":["constants.ts:36"]}],[{"l":"SolanaBlockchainNetworks","p":["@kycdao/kycdao-sdk - v0.6.4/ SolanaBlockchainNetworks","Collection of supported Solana blockchain networks."]},{"l":"Table of contents"},{"l":"Enumeration Members","p":["SolanaDevnet","SolanaMainnet","SolanaTestnet"]},{"i":"enumeration-members-1","l":"Enumeration Members"},{"l":"SolanaDevnet","p":["• SolanaDevnet= SolanaDevnet"]},{"l":"Defined in","p":["constants.ts:45"]},{"l":"SolanaMainnet","p":["• SolanaMainnet= SolanaMainnet"]},{"i":"defined-in-1","l":"Defined in","p":["constants.ts:46"]},{"l":"SolanaTestnet","p":["• SolanaTestnet= SolanaTestnet"]},{"i":"defined-in-2","l":"Defined in","p":["constants.ts:47"]}],[{"l":"StatusErrors","p":["@kycdao/kycdao-sdk - v0.6.4/ StatusErrors","Error codes for the StatusError class"]},{"l":"Table of contents"},{"l":"Enumeration Members","p":["DisclaimerNotAccepted","InvalidEmailAddress","InvalidTaxResidency","NetworkNotEnabled","NetworkNotSupported","NetworkSwitchingFailed","TermsAndConditionsNotAccepted","UserAlreadyVerified","UserNotLoggedIn","UserNotVerified","WalletNotConnected"]},{"i":"enumeration-members-1","l":"Enumeration Members"},{"l":"DisclaimerNotAccepted","p":["• DisclaimerNotAccepted= string","The called API function requires the disclaimer to be accepted by the user"]},{"l":"Defined in","p":["errors.ts:46"]},{"l":"InvalidEmailAddress","p":["• InvalidEmailAddress= string","The provided email address is invalid"]},{"i":"defined-in-1","l":"Defined in","p":["errors.ts:39"]},{"l":"InvalidTaxResidency","p":["• InvalidTaxResidency= string","The provided tax residency is invalid"]},{"i":"defined-in-2","l":"Defined in","p":["errors.ts:41"]},{"l":"NetworkNotEnabled","p":["• NetworkNotEnabled= string","The selected network is supported by the SDK but wasn't enabled in the SDK"]},{"i":"defined-in-3","l":"Defined in","p":["errors.ts:56"]},{"l":"NetworkNotSupported","p":["• NetworkNotSupported= string","The selected network is not supported by the SDK"]},{"i":"defined-in-4","l":"Defined in","p":["errors.ts:54"]},{"l":"NetworkSwitchingFailed","p":["• NetworkSwitchingFailed= string","Network switching failed"]},{"i":"defined-in-5","l":"Defined in","p":["errors.ts:58"]},{"l":"TermsAndConditionsNotAccepted","p":["• TermsAndConditionsNotAccepted= string","The called API function requires the terms and conditions to be accepted by the user"]},{"i":"defined-in-6","l":"Defined in","p":["errors.ts:43"]},{"l":"UserAlreadyVerified","p":["• UserAlreadyVerified= string","The user has an active verification while requesting a new verification"]},{"i":"defined-in-7","l":"Defined in","p":["errors.ts:52"]},{"l":"UserNotLoggedIn","p":["• UserNotLoggedIn= string","The called API function requires an active logged in user"]},{"i":"defined-in-8","l":"Defined in","p":["errors.ts:37"]},{"l":"UserNotVerified","p":["• UserNotVerified= string","The called API function requires the user to be verified"]},{"i":"defined-in-9","l":"Defined in","p":["errors.ts:50"]},{"l":"WalletNotConnected","p":["• WalletNotConnected= string","The called API function requires a wallet to be connected"]},{"i":"defined-in-10","l":"Defined in","p":["errors.ts:48"]}],[{"l":"TransactionErrors","p":["@kycdao/kycdao-sdk - v0.6.4/ TransactionErrors","Error codes for the TransactionError class"]},{"l":"Table of contents"},{"l":"Enumeration Members","p":["GasEstimationError","MintingCostCalculationError","TransactionFailed","TransactionNotFound","TransactionRejected"]},{"i":"enumeration-members-1","l":"Enumeration Members"},{"l":"GasEstimationError","p":["• GasEstimationError= string","An error occurred during evaluating the required gas. Can be caused by unstable RPC endpoint."]},{"l":"Defined in","p":["errors.ts:94"]},{"l":"MintingCostCalculationError","p":["• MintingCostCalculationError= string","An error occurred during evaluating the minting cost. Can be caused by unstable RPC endpoint."]},{"i":"defined-in-1","l":"Defined in","p":["errors.ts:92"]},{"l":"TransactionFailed","p":["• TransactionFailed= string","The transaction was found on the chain but it's in a failed state."]},{"i":"defined-in-2","l":"Defined in","p":["errors.ts:88"]},{"l":"TransactionNotFound","p":["• TransactionNotFound= string","The transaction was not found on the chain in time."]},{"i":"defined-in-3","l":"Defined in","p":["errors.ts:86"]},{"l":"TransactionRejected","p":["• TransactionRejected= string","The transaction was rejected by the contract."]},{"i":"defined-in-4","l":"Defined in","p":["errors.ts:90"]}],[{"l":"VerificationTypes","p":["@kycdao/kycdao-sdk - v0.6.4/ VerificationTypes","Collection of supported verification low types."]},{"l":"Table of contents"},{"l":"Enumeration Members","p":["AccreditedInvestor","KYC"]},{"i":"enumeration-members-1","l":"Enumeration Members"},{"l":"AccreditedInvestor","p":["• AccreditedInvestor= AccreditedInvestor"]},{"l":"Defined in","p":["constants.ts:227"]},{"l":"KYC","p":["• KYC= KYC"]},{"i":"defined-in-1","l":"Defined in","p":["constants.ts:228"]}],[{"l":"WalletErrors","p":["@kycdao/kycdao-sdk - v0.6.4/ WalletErrors","Error codes for the WalletError class"]},{"l":"Table of contents"},{"l":"Enumeration Members","p":["AccountUnauthorized","ChainMissing","InsufficientFunds","InternalWalletError","RejectedByUser","UserNotConnected"]},{"i":"enumeration-members-1","l":"Enumeration Members"},{"l":"AccountUnauthorized","p":["• AccountUnauthorized= string","The SDK is trying to do a wallet action, but the account provided by the wallet was not authorized before."]},{"l":"Defined in","p":["errors.ts:69"]},{"l":"ChainMissing","p":["• ChainMissing= string","The chain does not exist in the user's wallet"]},{"i":"defined-in-1","l":"Defined in","p":["errors.ts:77"]},{"l":"InsufficientFunds","p":["• InsufficientFunds= string","The account does not have enough funds to complete the transaction."]},{"i":"defined-in-2","l":"Defined in","p":["errors.ts:73"]},{"l":"InternalWalletError","p":["• InternalWalletError= string","An internal wallet error occured."]},{"i":"defined-in-3","l":"Defined in","p":["errors.ts:75"]},{"l":"RejectedByUser","p":["• RejectedByUser= string","The wallet action initiated by the SDK was cancelled by the user."]},{"i":"defined-in-4","l":"Defined in","p":["errors.ts:71"]},{"l":"UserNotConnected","p":["• UserNotConnected= string","The user is not connected to chain. It can happen because of network connection problems."]},{"i":"defined-in-5","l":"Defined in","p":["errors.ts:67"]}],[{"l":"BlockchainNetworkConfiguration","p":["@kycdao/kycdao-sdk - v0.6.4/ BlockchainNetworkConfiguration","Blockchain network configuration options.","Interface"]},{"l":"Table of contents"},{"l":"Properties","p":["rpcUrl"]},{"i":"properties-1","l":"Properties"},{"l":"rpcUrl","p":["• Optional rpcUrl: string"]},{"l":"Defined in","p":["types.ts:130"]}],[{"l":"ChainAndAddress","p":["@kycdao/kycdao-sdk - v0.6.4/ ChainAndAddress","Representation of a blockchain wallet with the implemented blockchain protocol included.","Interface"]},{"l":"Table of contents"},{"l":"Properties","p":["address","blockchain","blockchainNetwork"]},{"i":"properties-1","l":"Properties"},{"l":"address","p":["• address: string","The wallet address."]},{"l":"Defined in","p":["types.ts:351"]},{"l":"blockchain","p":["• blockchain: Ethereum| Near| Solana","A blockchain from Blockchains."]},{"i":"defined-in-1","l":"Defined in","p":["types.ts:339"]},{"l":"blockchainNetwork","p":["• blockchainNetwork: CeloAlfajores| CeloMainnet| EthereumGoerli| EthereumMainnet| PolygonMainnet| PolygonMumbai| NearMainnet| NearTestnet| SolanaDevnet| SolanaMainnet| SolanaTestnet","A blockchain from BlockchainNetworks."]},{"i":"defined-in-2","l":"Defined in","p":["types.ts:345"]}],[{"l":"Country","p":["@kycdao/kycdao-sdk - v0.6.4/ Country"]},{"l":"Table of contents"},{"l":"Properties","p":["iso_cca2","name"]},{"i":"properties-1","l":"Properties"},{"l":"iso_cca2","p":["• iso_cca2: string","Alphanumeric, 2 character ISO code of the country."]},{"l":"Defined in","p":["types.ts:438"]},{"l":"name","p":["• name: string","English name of the country."]},{"i":"defined-in-1","l":"Defined in","p":["types.ts:432"]}],[{"l":"EmailData","p":["@kycdao/kycdao-sdk - v0.6.4/ EmailData","Information about a user's active email address","Interface"]},{"l":"Table of contents"},{"l":"Properties","p":["address","isConfirmed"]},{"i":"properties-1","l":"Properties"},{"l":"address","p":["• Optional address: string"]},{"l":"Defined in","p":["types.ts:534"]},{"l":"isConfirmed","p":["• Optional isConfirmed: boolean"]},{"i":"defined-in-1","l":"Defined in","p":["types.ts:535"]}],[{"l":"KycDaoInitializationResult","p":["@kycdao/kycdao-sdk - v0.6.4/ KycDaoInitializationResult","The result of the SDK initialization process.","Interface"]},{"l":"Table of contents"},{"l":"Properties","p":["kycDao","mintingResult","redirectEvent","sdkStatus","transactionUrl"]},{"i":"properties-1","l":"Properties"},{"l":"kycDao","p":["• kycDao: KycDao","The instance of the initialized KycDao class."]},{"l":"Defined in","p":["index.ts:153"]},{"l":"mintingResult","p":["• Optional mintingResult: MintingResult","Data related to a successful mint transaction and the minted token, if the handled redirectEvent was a mint even."]},{"i":"defined-in-1","l":"Defined in","p":["index.ts:179"]},{"l":"redirectEvent","p":["• Optional redirectEvent: RedirectEvent","The type of RedirectEvent that was detected and handled during the initialization, if there was one."]},{"i":"defined-in-2","l":"Defined in","p":["index.ts:159"]},{"l":"sdkStatus","p":["• sdkStatus: SdkStatus","The current status of the SDK."]},{"i":"defined-in-3","l":"Defined in","p":["index.ts:165"]},{"l":"transactionUrl","p":["• Optional transactionUrl: string","Deprecated","since version 0.5.0, see mintingResult","Chain explorer URL of the transaction related to the handled redirectEvent, if there is any."]},{"i":"defined-in-4","l":"Defined in","p":["index.ts:173"]}],[{"l":"MintingData","p":["@kycdao/kycdao-sdk - v0.6.4/ MintingData","Data required by kycDAO to initiate NFT minting.","Interface"]},{"l":"Table of contents"},{"l":"Properties","p":["disclaimerAccepted","imageId","subscriptionYears","verificationType"]},{"i":"properties-1","l":"Properties"},{"l":"disclaimerAccepted","p":["• disclaimerAccepted: boolean","Was the disclaimer about the kycDAO NFTs accepted by the user? Has to be true or the minting request will fail."]},{"l":"Defined in","p":["types.ts:661"]},{"l":"imageId","p":["• imageId: string","The ID of the selected image to be minted in the NFT. Has to be one of the keys in the object returned by the getNftImageOptions method."]},{"i":"defined-in-1","l":"Defined in","p":["types.ts:677"]},{"l":"subscriptionYears","p":["• Optional subscriptionYears: number","The number of years for which the user will be subscribed to kycDAO. This will directly influence the expiry time and the minting cost of the token. The default value is 1 year. Currently it only has any effect if the user is not subscribed yet, otherwise this value will be ignored. The current user's subscription status can be checked with the subscribed."]},{"i":"defined-in-2","l":"Defined in","p":["types.ts:684"]},{"l":"verificationType","p":["• Optional verificationType: AccreditedInvestor| KYC","The user has to be verified for this verification type to be able to have a token minted. The checkVerificationStatus method can be used to query/poll the kycDao server and check for the verification status. The verification type determines which smart contract will be used for the minting. It defaults to KYC when left undefined for backward compatibility reasons.","Default","KYC"]},{"i":"defined-in-3","l":"Defined in","p":["types.ts:671"]}],[{"l":"MintingResult","p":["@kycdao/kycdao-sdk - v0.6.4/ MintingResult","Data related to a successful mint transaction and the minted token.","Interface"]},{"l":"Table of contents"},{"l":"Properties","p":["imageUrl","tokenId","transactionUrl"]},{"i":"properties-1","l":"Properties"},{"l":"imageUrl","p":["• imageUrl: string","The URL of the image associated with the minted token."]},{"l":"Defined in","p":["types.ts:711"]},{"l":"tokenId","p":["• tokenId: string","The ID associated with the minted token."]},{"i":"defined-in-1","l":"Defined in","p":["types.ts:705"]},{"l":"transactionUrl","p":["• transactionUrl: string","Chain explorer URL of the minting transaction."]},{"i":"defined-in-2","l":"Defined in","p":["types.ts:699"]}],[{"l":"NetworkAndAddress","p":["@kycdao/kycdao-sdk - v0.6.4/ NetworkAndAddress","Representation of a blockchain wallet.","Interface"]},{"l":"Table of contents"},{"l":"Properties","p":["address","blockchainNetwork"]},{"i":"properties-1","l":"Properties"},{"l":"address","p":["• address: string","The wallet address."]},{"l":"Defined in","p":["types.ts:324"]},{"l":"blockchainNetwork","p":["• blockchainNetwork: CeloAlfajores| CeloMainnet| EthereumGoerli| EthereumMainnet| PolygonMainnet| PolygonMumbai| NearMainnet| NearTestnet| SolanaDevnet| SolanaMainnet| SolanaTestnet","A blockchain from BlockchainNetworks."]},{"i":"defined-in-1","l":"Defined in","p":["types.ts:318"]}],[{"l":"NftCheckOptions","p":["@kycdao/kycdao-sdk - v0.6.4/ NftCheckOptions","Options for the valid NFT checker and getter methods (e.g. hasValidNft and getValidNfts).","Interface"]},{"l":"Table of contents"},{"l":"Properties","p":["networkAndAddress","rpcUrl"]},{"i":"properties-1","l":"Properties"},{"l":"networkAndAddress","p":["• Optional networkAndAddress: NetworkAndAddress","The wallet to check for a valid kycDAO NFT. If undefined the current connected wallet will be used."]},{"l":"Defined in","p":["types.ts:453"]},{"l":"rpcUrl","p":["• Optional rpcUrl: string","Deprecated","since version 0.3.6, use blockchainNetworkConfiguration instead to override RPC endpoints.","A custom RPC endpoint URL to use for the check instead of the default one."]},{"i":"defined-in-1","l":"Defined in","p":["types.ts:461"]}],[{"l":"NftCheckResponse","p":["@kycdao/kycdao-sdk - v0.6.4/ NftCheckResponse","The result of an on-chain valid kycDAO NFT check.","Interface"]},{"l":"Table of contents"},{"l":"Properties","p":["error","hasValidNft","networkAndAddress","tokens"]},{"i":"properties-1","l":"Properties"},{"l":"error","p":["• Optional error: string","The error encountered during the check. It will always have a value if the checking process failed and it will be undefined if the check was successfully performed."]},{"l":"Defined in","p":["types.ts:517"]},{"l":"hasValidNft","p":["• Optional hasValidNft: boolean","The result of the check. It will always have a value if the check was successfully performed and it will be undefined if the check failed."]},{"i":"defined-in-1","l":"Defined in","p":["types.ts:510"]},{"l":"networkAndAddress","p":["• networkAndAddress: NetworkAndAddress","The network and wallet address that was checked."]},{"i":"defined-in-2","l":"Defined in","p":["types.ts:503"]},{"l":"tokens","p":["• Optional tokens: TokenMetadata[]","List of tokens that match the check request. It will be defined only if hasValidNft is true and the request involved querying the NFT data (e.g. getValidNfts). It will be undefined otherwise."]},{"i":"defined-in-3","l":"Defined in","p":["types.ts:524"]}],[{"l":"PersonaOptions","p":["@kycdao/kycdao-sdk - v0.6.4/ PersonaOptions","Options related to the Persona verification flow.","Interface"]},{"l":"Table of contents"},{"l":"Properties","p":["frameAncestors","messageTargetOrigin","onCancel","onComplete","onError"]},{"i":"properties-1","l":"Properties"},{"l":"frameAncestors","p":["• Optional frameAncestors: string[]","Allows specifying additional origins for CSP purposes. Values should include both protocol and host (e.g. https://withpersona.com).","This is REQUIRED when the page that embeds the Persona widget is itself embedded in another page as an iframe. The value should be an array of origins for ALL iframes that are ancestors of the Persona iframe.","window.target.origin is provided by default."]},{"l":"Defined in","p":["types.ts:620"]},{"l":"messageTargetOrigin","p":["• Optional messageTargetOrigin: string","Allows specifying a custom target for window.postMessage from the Persona app, which defaults to the iframe origin.","This is REQUIRED when the page that embeds the Persona widget is itself embedded in another page as an iframe. The value should be the origin where the Persona SDK is mounted."]},{"i":"defined-in-1","l":"Defined in","p":["types.ts:631"]},{"l":"onCancel","p":["• Optional onCancel: () => void"]},{"l":"Type declaration","p":["▸ (): void","This callback is called when an user cancels the inquiry flow before completion."]},{"l":"Returns","p":["void"]},{"i":"defined-in-2","l":"Defined in","p":["types.ts:595"]},{"l":"onComplete","p":["• Optional onComplete: () => void"]},{"i":"type-declaration-1","l":"Type declaration","p":["▸ (): void","This callback is called when the inquiry has completed the inquiry flow and the user clicks on the complete button to close the flow."]},{"i":"returns-1","l":"Returns","p":["void"]},{"i":"defined-in-3","l":"Defined in","p":["types.ts:601"]},{"l":"onError","p":["• Optional onError: ( error: string) => void"]},{"i":"type-declaration-2","l":"Type declaration","p":["▸ ( error): void","This callback is called in response to errors in the inquiry flow that prevent the inquiry flow from being usable. These generally occur on initial load."]},{"l":"Parameters","p":["Name","Type","error","string"]},{"i":"returns-2","l":"Returns","p":["void"]},{"i":"defined-in-4","l":"Defined in","p":["types.ts:607"]}],[{"l":"SdkConfiguration","p":["@kycdao/kycdao-sdk - v0.6.4/ SdkConfiguration","Configuration parameters required for instantiating the SDK object.","Interface"]},{"l":"Table of contents"},{"l":"Properties","p":["apiKey","baseUrl","blockchainNetworkConfiguration","demoMode","enabledBlockchainNetworks","enabledVerificationTypes","environment","evmProvider","sentryConfiguration"]},{"i":"properties-1","l":"Properties"},{"l":"apiKey","p":["• Optional apiKey: string","CURRENTLY UNUSED Optional API key used to identify the client initializing the SDK."]},{"l":"Defined in","p":["types.ts:156"]},{"l":"baseUrl","p":["• baseUrl: string","The base API URL of the kycDAO server to connect to. For integration/testing use https://staging.kycdao.xyz For production use https://kycdao.xyz"]},{"i":"defined-in-1","l":"Defined in","p":["types.ts:182"]},{"l":"blockchainNetworkConfiguration","p":["• Optional blockchainNetworkConfiguration: Partial< Record< CeloAlfajores| CeloMainnet| EthereumGoerli| EthereumMainnet| PolygonMainnet| PolygonMumbai| NearMainnet| NearTestnet| SolanaDevnet| SolanaMainnet| SolanaTestnet, BlockchainNetworkConfiguration>>","An optional blockchain network configuration override parameter which allows certain network related values to be customized (e.g. custom RPC endpoints can be specified)."]},{"i":"defined-in-2","l":"Defined in","p":["types.ts:214"]},{"l":"demoMode","p":["• Optional demoMode: boolean","Switch for enabling demo mode. Demo mode is intended to be more conveninet for demonstrating (and also developing) the integration with kycDAO. It removes some verification and minting restrictions so the same wallet/user can be used multiple times to start/finish the flows.","Default","false"]},{"i":"defined-in-3","l":"Defined in","p":["types.ts:174"]},{"l":"enabledBlockchainNetworks","p":["• enabledBlockchainNetworks: ( CeloAlfajores| CeloMainnet| EthereumGoerli| EthereumMainnet| PolygonMainnet| PolygonMumbai| NearMainnet| NearTestnet| SolanaDevnet| SolanaMainnet| SolanaTestnet)[]","List of BlockchainNetworks to be available to use. This can influence what third party providers will get initialized. As a rule of thumb test networks will be available when connecting to a kycDAO test server and main networks when connecting to the kycDAO production server (see baseUrl)."]},{"i":"defined-in-4","l":"Defined in","p":["types.ts:189"]},{"l":"enabledVerificationTypes","p":["• enabledVerificationTypes: ( AccreditedInvestor| KYC)[]","List of VerificationTypes to be available to use. This can influence what third party providers will get initialized. Limitations: Only networks of a single chain type/protocol can be enabled at a time. Currently we do not allow initialization with multiple protocols."]},{"i":"defined-in-5","l":"Defined in","p":["types.ts:199"]},{"l":"environment","p":["• Optional environment: demo| test","Deprecated","since version 0.1.3, use demoMode switch instead.","Environment type used for influencing the behavior of the SDK.","See","KycDaoEnvironments for more details."]},{"i":"defined-in-6","l":"Defined in","p":["types.ts:165"]},{"l":"evmProvider","p":["• Optional evmProvider: unknown","If there are any EVM networks enabled this object will be used as the EVM provider (i.e.: MetaMask, WalletConnect or anything EIP-1193, EIP-2255 compatible). Historically, EVM providers have been made available as the window.ethereum object in web browsers, but this convention is not part of the mentioned specifications. Existance of required methods/fields will be verified during SDK initialization."]},{"i":"defined-in-7","l":"Defined in","p":["types.ts:208"]},{"l":"sentryConfiguration","p":["• Optional sentryConfiguration: SentryConfiguration","Optional configuration for Sentry. If a configuration is provided the Sentry package will be lazy-loaded by the SDK and errors will be reported."]},{"i":"defined-in-8","l":"Defined in","p":["types.ts:222"]}],[{"l":"SdkStatus","p":["@kycdao/kycdao-sdk - v0.6.4/ SdkStatus","The current status of the SDK.","Interface"]},{"l":"Table of contents"},{"l":"Properties","p":["availableBlockchainNetworks","availableVerificationTypes","baseUrl","demoMode","evmProviderConfigured","nearNetworkConnected","solanaNetworkConnected"]},{"i":"properties-1","l":"Properties"},{"l":"availableBlockchainNetworks","p":["• availableBlockchainNetworks: ( CeloAlfajores| CeloMainnet| EthereumGoerli| EthereumMainnet| PolygonMainnet| PolygonMumbai| NearMainnet| NearTestnet| SolanaDevnet| SolanaMainnet| SolanaTestnet)[]","List of BlockchainNetworks currently available to use. See enabledBlockchainNetworks."]},{"l":"Defined in","p":["types.ts:249"]},{"l":"availableVerificationTypes","p":["• availableVerificationTypes: ( AccreditedInvestor| KYC)[]","List of VerificationTypes currently available to use. See enabledVerificationTypes."]},{"i":"defined-in-1","l":"Defined in","p":["types.ts:255"]},{"l":"baseUrl","p":["• baseUrl: string","The base API URL of the kycDAO server currently used by the SDK."]},{"i":"defined-in-2","l":"Defined in","p":["types.ts:237"]},{"l":"demoMode","p":["• demoMode: boolean","A flag indicating if demo mode is turned on or not. See demoMode."]},{"i":"defined-in-3","l":"Defined in","p":["types.ts:243"]},{"l":"evmProviderConfigured","p":["• evmProviderConfigured: boolean","A flag indicating if an EVM provider is configured and ready to use or not. See evmProvider."]},{"i":"defined-in-4","l":"Defined in","p":["types.ts:261"]},{"l":"nearNetworkConnected","p":["• nearNetworkConnected: null| NearMainnet| NearTestnet","The NEAR blockchain network currently used by the SDK, null if there is none. This value will depend on the SdkConfiguration provided and the available networks on the connected kycDAO server."]},{"i":"defined-in-5","l":"Defined in","p":["types.ts:268"]},{"l":"solanaNetworkConnected","p":["• solanaNetworkConnected: null| SolanaDevnet| SolanaMainnet| SolanaTestnet","The Solana blockchain network currently used by the SDK, null if there is none. This value will depend on the SdkConfiguration provided and the available networks on the connected kycDAO server."]},{"i":"defined-in-6","l":"Defined in","p":["types.ts:275"]}],[{"l":"SentryConfiguration","p":["@kycdao/kycdao-sdk - v0.6.4/ SentryConfiguration","Sentry configuration options.","Interface"]},{"l":"Table of contents"},{"l":"Properties","p":["dsn"]},{"i":"properties-1","l":"Properties"},{"l":"dsn","p":["• dsn: string"]},{"l":"Defined in","p":["types.ts:140"]}],[{"l":"ServerStatus","p":["@kycdao/kycdao-sdk - v0.6.4/ ServerStatus","Status of a kycDAO server.","Interface"]},{"l":"Table of contents"},{"l":"Properties","p":["apiStatus","isOk","serverBaseUrl"]},{"i":"properties-1","l":"Properties"},{"l":"apiStatus","p":["• apiStatus: string","If the server status is OK it contains the current server datetime in ISO 8601 format. If it isn't it contains an error message."]},{"l":"Defined in","p":["types.ts:297"]},{"l":"isOk","p":["• isOk: boolean","Signals if the server is available and accesible or not."]},{"i":"defined-in-1","l":"Defined in","p":["types.ts:303"]},{"l":"serverBaseUrl","p":["• serverBaseUrl: string","The base API URL of the connected kycDAO server."]},{"i":"defined-in-2","l":"Defined in","p":["types.ts:290"]}],[{"l":"TokenMetadata","p":["@kycdao/kycdao-sdk - v0.6.4/ TokenMetadata","Metadata of a kycDAO NFT.","Interface"]},{"l":"Table of contents"},{"l":"Properties","p":["description","image","name"]},{"i":"properties-1","l":"Properties"},{"l":"description","p":["• description: string","The description of the token."]},{"l":"Defined in","p":["types.ts:482"]},{"l":"image","p":["• image: string","The URI of the image associated with the token."]},{"i":"defined-in-1","l":"Defined in","p":["types.ts:488"]},{"l":"name","p":["• name: string","The name of the token."]},{"i":"defined-in-2","l":"Defined in","p":["types.ts:476"]}],[{"l":"VerificationData","p":["@kycdao/kycdao-sdk - v0.6.4/ VerificationData","Data required by kycDAO to initiate a verification flow.","Interface"]},{"l":"Table of contents"},{"l":"Properties","p":["email","isEmailConfirmed","isLegalEntity","taxResidency","termsAccepted","verificationType"]},{"i":"properties-1","l":"Properties"},{"l":"email","p":["• email: string","Email address of the user."]},{"l":"Defined in","p":["types.ts:550"]},{"l":"isEmailConfirmed","p":["• isEmailConfirmed: boolean","Was the email address already confirmed?"]},{"i":"defined-in-1","l":"Defined in","p":["types.ts:556"]},{"l":"isLegalEntity","p":["• isLegalEntity: boolean","Is the user a legal entity or not?"]},{"i":"defined-in-2","l":"Defined in","p":["types.ts:568"]},{"l":"taxResidency","p":["• taxResidency: string","Country of tax residency. Either the English name or the ISO code of a country from the Countries list."]},{"i":"defined-in-3","l":"Defined in","p":["types.ts:562"]},{"l":"termsAccepted","p":["• termsAccepted: boolean","Were the kycDAO legal documents accepted by the user? Has to be true or verification requests will fail."]},{"i":"defined-in-4","l":"Defined in","p":["types.ts:580"]},{"l":"verificationType","p":["• verificationType: AccreditedInvestor| KYC","The selected verification type from enabledVerificationTypes specified in SdkConfiguration during initialization."]},{"i":"defined-in-5","l":"Defined in","p":["types.ts:574"]}],[{"l":"VerificationProviderOptions","p":["@kycdao/kycdao-sdk - v0.6.4/ VerificationProviderOptions","Options related to various verification providers.","Interface"]},{"l":"Table of contents"},{"l":"Properties","p":["personaOptions"]},{"i":"properties-1","l":"Properties"},{"l":"personaOptions","p":["• Optional personaOptions: PersonaOptions","Options related to the Persona."]},{"l":"Defined in","p":["types.ts:646"]}]]