[[{"l":"kycDAO SDK for integration into web3 sites","p":["kycDAO JS/TS SDK canonical URL: https://github.com/kycdao/kycdao-js-sdk","kycDAO creates a shared bridge of on-chain verification proofs that enable web3 service providers to deliver products to trusted users across ecosystems and blockchains. Non-transferable NFTs are minted as proof-of-verifications (no PII) to enable compliant composability while eliminating data duplication. kycNFTs are the base for a permissionless identity and serve as a unique web3 version of a twitter tick."]},{"l":"Install","p":["hard dependencies persona https://www.npmjs.com/package/persona https://docs.withpersona.com/docs/quickstart-embedded-flow","peer deps NEAR SDK ethers.js ?"]},{"l":"Getting Started","p":["[code snippets]","Please make sure the subresource integrity hash is correct: https://unpkg.com/@kycdao/kycdao-sdk@0.0.10/dist/index.js?meta"]},{"l":"Integration example","p":["Example repository at https://github.com/kycdao/sdk-example"]}],[{"l":"API reference","p":["@kycdao/kycdao-sdk - v0.2.0"]},{"l":"Table of contents"},{"l":"Enumerations","p":["BlockchainNetworks","Blockchains","KycDaoEnvironments","VerificationTypes"]},{"l":"Classes","p":["KycDao"]},{"l":"Interfaces","p":["ChainAndAddress","Country","KycDaoInitializationResult","MintingData","PersonaOptions","SdkConfiguration","SdkStatus","ServerStatus","VerificationData","VerificationProviderOptions"]},{"l":"Type Aliases","p":["Blockchain","BlockchainNetwork","RedirectEvent","VerificationStasusByType","VerificationType"]},{"l":"Variables","p":["Countries"]},{"i":"type-aliases-1","l":"Type Aliases"},{"l":"Blockchain","p":["Ƭ Blockchain: keyof typeof Blockchains","Union type of string values of Blockchains."]},{"l":"Defined in","p":["types.ts:24"]},{"l":"BlockchainNetwork","p":["Ƭ BlockchainNetwork: keyof typeof BlockchainNetworks","Union type of string values of BlockchainNetworks."]},{"i":"defined-in-1","l":"Defined in","p":["types.ts:47"]},{"l":"RedirectEvent","p":["Ƭ RedirectEvent: NearLogin| NearMint| NearUserRejectedError","Possible events handled by the SDK during initialization after a redirect."]},{"i":"defined-in-2","l":"Defined in","p":["types.ts:102"]},{"l":"VerificationStasusByType","p":["Ƭ VerificationStasusByType: Partial< Record< VerificationType, boolean>>","Type for representing verified status for possible verification types with a boolean flag."]},{"i":"defined-in-3","l":"Defined in","p":["types.ts:90"]},{"l":"VerificationType","p":["Ƭ VerificationType: keyof typeof VerificationTypes","Union type of string values of VerificationTypes."]},{"i":"defined-in-4","l":"Defined in","p":["types.ts:83"]},{"i":"variables-1","l":"Variables"},{"l":"Countries","p":["• Const Countries: Country[]","The list of countries recognized by the SDK with their respective ISO codes."]},{"i":"defined-in-5","l":"Defined in","p":["index.ts:110"]}],[{"l":"KycDao","p":["@kycdao/kycdao-sdk - v0.2.0/ KycDao","This class provides the connection to a kycDAO server, initiates flows with third party providers (for wallet connection, verification, etc.) and handles responses and redirects from them."]},{"l":"Hierarchy","p":["ApiBase","↳ KycDao"]},{"l":"Table of contents"},{"l":"Accessors","p":["baseUrl","connectedWallet","loggedIn","sdkStatus","walletConnected"]},{"l":"Methods","p":["checkVerificationStatus","connectWallet","disconnectWallet","getNftImageUrl","getServerStatus","regenerateNftImage","registerOrLogin","startMinting","startVerification","walletHasKycNft","initialize"]},{"i":"accessors-1","l":"Accessors"},{"l":"baseUrl","p":["• get baseUrl(): string","Returns the base URL of the configured kycDAO server.","readonly"]},{"l":"Returns","p":["string"]},{"l":"Inherited from","p":["ApiBase.baseUrl"]},{"l":"Defined in","p":["api-base.ts:30"]},{"l":"connectedWallet","p":["• get connectedWallet(): undefined| ChainAndAddress","Returns the connected wallet if there is any.","readonly"]},{"i":"returns-1","l":"Returns","p":["undefined| ChainAndAddress"]},{"i":"defined-in-1","l":"Defined in","p":["index.ts:156"]},{"l":"loggedIn","p":["• get loggedIn(): boolean","Returns if there is a user currently logged in.","readonly"]},{"i":"returns-2","l":"Returns","p":["boolean"]},{"i":"defined-in-2","l":"Defined in","p":["index.ts:179"]},{"l":"sdkStatus","p":["• get sdkStatus(): SdkStatus","Returns the current status of the SDK.","readonly"]},{"i":"returns-3","l":"Returns","p":["SdkStatus"]},{"i":"defined-in-3","l":"Defined in","p":["index.ts:139"]},{"l":"walletConnected","p":["• get walletConnected(): boolean","Returns if there is a wallet currently connected.","readonly"]},{"i":"returns-4","l":"Returns","p":["boolean"]},{"i":"defined-in-4","l":"Defined in","p":["index.ts:166"]},{"i":"methods-1","l":"Methods"},{"l":"checkVerificationStatus","p":["▸ checkVerificationStatus(): Promise< Partial< Record< AccreditedInvestor| KYC, boolean>>>","This method can be used to poll the backend, refreshing the user session and checking for the verification status.","async","see VerificationTypes"]},{"i":"returns-5","l":"Returns","p":["Promise< Partial< Record< AccreditedInvestor| KYC, boolean>>>"]},{"i":"defined-in-5","l":"Defined in","p":["index.ts:1168"]},{"l":"connectWallet","p":["▸ connectWallet( blockchain): Promise< void>","Initiates wallet connection with a third party wallet provider.","async","see Blockchains"]},{"l":"Parameters","p":["Name","Type","blockchain","Ethereum| Near"]},{"i":"returns-6","l":"Returns","p":["Promise< void>"]},{"i":"defined-in-6","l":"Defined in","p":["index.ts:875"]},{"l":"disconnectWallet","p":["▸ disconnectWallet(): Promise< void>","Disconnects the currently connected wallet (from the current domain). Only works with NEAR wallets, can be used before KycDao.connectWallet to allow connecting a new NEAR wallet instead of a previously connected one.","async"]},{"i":"returns-7","l":"Returns","p":["Promise< void>"]},{"i":"defined-in-7","l":"Defined in","p":["index.ts:958"]},{"l":"getNftImageUrl","p":["▸ getNftImageUrl(): string","Returns the URL of the identicon that will be saved into the next minted NFT for the current user. The URL is static and always returns the currently generated image for the user."]},{"i":"returns-8","l":"Returns","p":["string"]},{"i":"defined-in-8","l":"Defined in","p":["index.ts:1191"]},{"l":"getServerStatus","p":["▸ getServerStatus(): Promise< ServerStatus>","A test method to check configuration and kycDAO server access.","async"]},{"i":"returns-9","l":"Returns","p":["Promise< ServerStatus>"]},{"i":"defined-in-9","l":"Defined in","p":["index.ts:812"]},{"l":"regenerateNftImage","p":["▸ regenerateNftImage(): Promise< void>","This method generates a new identicon for the user.","remark The image URL is static so it has to be force-reloaded after the change.","async"]},{"i":"returns-10","l":"Returns","p":["Promise< void>"]},{"i":"defined-in-10","l":"Defined in","p":["index.ts:1203"]},{"l":"registerOrLogin","p":["▸ registerOrLogin(): Promise< void>","This method creates a session and user for the connected wallet, or log them in. A session cookie will be saved in the browser.","remarks Ideally this method shouldn't be called repeatedly in quick succession (before the previous call got resolved) because in case of new wallets/users the registration logic will be triggered multiple times and every call after the first one will result in an error. For the same reason, error handling is advised.","async"]},{"i":"returns-11","l":"Returns","p":["Promise< void>"]},{"i":"defined-in-11","l":"Defined in","p":["index.ts:993"]},{"l":"startMinting","p":["▸ startMinting( mintingData): Promise< void>","This step updates the user based on the MintingData provided and checks if the user is eligible to mint a token. Then calls the server to authorize minting for the current wallet and waits for the transaction to succeed (but max about 2 minutes). After an authorization code is acquired it initiates the minting.","async"]},{"i":"parameters-1","l":"Parameters","p":["Name","Type","mintingData"]},{"i":"returns-12","l":"Returns","p":["Promise< void>"]},{"i":"defined-in-12","l":"Defined in","p":["index.ts:1336"]},{"l":"startVerification","p":["▸ startVerification( verificationData, providerOptions?): Promise< void>","This method updates the user with data provided in VerificationData and then starts a verification flow with the approrpiate third party provider.","async"]},{"i":"parameters-2","l":"Parameters","p":["Name","Type","verificationData","providerOptions?","VerificationProviderOptions"]},{"i":"returns-13","l":"Returns","p":["Promise< void>"]},{"i":"defined-in-13","l":"Defined in","p":["index.ts:1135"]},{"l":"walletHasKycNft","p":["▸ walletHasKycNft(): Promise< boolean>","NOT IMPLEMENTED Checks on chain if the provided (or the currently connected) wallet has a kycNFT.","remarks IMPORTANT! The result of this request can be manipulated on the client side so make sure to verify this on the server side as well.","alpha","async"]},{"i":"returns-14","l":"Returns","p":["Promise< boolean>"]},{"i":"defined-in-14","l":"Defined in","p":["index.ts:851"]},{"l":"initialize","p":["▸ Static initialize( config): Promise< KycDaoInitializationResult>","Connect to a kycDAO server and initialize the SDK using the provided configuration.","static","async"]},{"i":"parameters-3","l":"Parameters","p":["Name","Type","config","SdkConfiguration"]},{"i":"returns-15","l":"Returns","p":["Promise< KycDaoInitializationResult>"]},{"i":"defined-in-15","l":"Defined in","p":["index.ts:775"]}],[{"l":"BlockchainNetworks","p":["@kycdao/kycdao-sdk - v0.2.0/ BlockchainNetworks","Collection of supported blockchain networks."]},{"l":"Table of contents"},{"l":"Enumeration Members","p":["EthereumMainnet","EthereumRinkeby","NearMainnet","NearTestnet","PolygonMainnet","PolygonMumbai"]},{"i":"enumeration-members-1","l":"Enumeration Members"},{"l":"EthereumMainnet","p":["• EthereumMainnet"]},{"l":"Defined in","p":["constants.ts:23"]},{"l":"EthereumRinkeby","p":["• EthereumRinkeby"]},{"i":"defined-in-1","l":"Defined in","p":["constants.ts:24"]},{"l":"NearMainnet","p":["• NearMainnet"]},{"i":"defined-in-2","l":"Defined in","p":["constants.ts:51"]},{"l":"NearTestnet","p":["• NearTestnet"]},{"i":"defined-in-3","l":"Defined in","p":["constants.ts:50"]},{"l":"PolygonMainnet","p":["• PolygonMainnet"]},{"i":"defined-in-4","l":"Defined in","p":["constants.ts:25"]},{"l":"PolygonMumbai","p":["• PolygonMumbai"]},{"i":"defined-in-5","l":"Defined in","p":["constants.ts:26"]}],[{"l":"Blockchains","p":["@kycdao/kycdao-sdk - v0.2.0/ Blockchains","Collection of supported blockchains."]},{"l":"Table of contents"},{"l":"Enumeration Members","p":["Ethereum","Near"]},{"i":"enumeration-members-1","l":"Enumeration Members"},{"l":"Ethereum","p":["• Ethereum"]},{"l":"Defined in","p":["constants.ts:11"]},{"l":"Near","p":["• Near"]},{"i":"defined-in-1","l":"Defined in","p":["constants.ts:12"]}],[{"l":"KycDaoEnvironments","p":["@kycdao/kycdao-sdk - v0.2.0/ KycDaoEnvironments","deprecated since version 0.1.3","Collection of available environment types for initializing the SDK."]},{"l":"Table of contents"},{"l":"Enumeration Members","p":["demo","test"]},{"i":"enumeration-members-1","l":"Enumeration Members"},{"l":"demo","p":["• demo","Demo mode is intended to be more conveninet for demonstrating (and also developing) the integration with kycDAO. Compared to the test mode it removes some verification and minting restrictions so the same wallet/user can be used multiple times to start/finish the flows."]},{"l":"Defined in","p":["constants.ts:75"]},{"l":"test","p":["• test","Test mode is intended to behave the same way as production but using test/sandbox servers and services of third party providers."]},{"i":"defined-in-1","l":"Defined in","p":["constants.ts:79"]}],[{"l":"VerificationTypes","p":["@kycdao/kycdao-sdk - v0.2.0/ VerificationTypes","Collection of supported verification low types."]},{"l":"Table of contents"},{"l":"Enumeration Members","p":["AccreditedInvestor","KYC"]},{"i":"enumeration-members-1","l":"Enumeration Members"},{"l":"AccreditedInvestor","p":["• AccreditedInvestor"]},{"l":"Defined in","p":["constants.ts:109"]},{"l":"KYC","p":["• KYC"]},{"i":"defined-in-1","l":"Defined in","p":["constants.ts:110"]}],[{"l":"ChainAndAddress","p":["@kycdao/kycdao-sdk - v0.2.0/ ChainAndAddress","Representation of a blockchain wallet.","interface ChainAndAddress"]},{"l":"Table of contents"},{"l":"Properties","p":["address","blockchain","blockchainNetwork"]},{"i":"properties-1","l":"Properties"},{"l":"address","p":["• address: string","The wallet address."]},{"l":"Defined in","p":["types.ts:272"]},{"l":"blockchain","p":["• blockchain: Ethereum| Near","A blockchain from Blockchains."]},{"i":"defined-in-1","l":"Defined in","p":["types.ts:260"]},{"l":"blockchainNetwork","p":["• blockchainNetwork: EthereumMainnet| EthereumRinkeby| PolygonMainnet| PolygonMumbai| NearTestnet| NearMainnet","A blockchain from BlockchainNetworks."]},{"i":"defined-in-2","l":"Defined in","p":["types.ts:266"]}],[{"l":"Country","p":["@kycdao/kycdao-sdk - v0.2.0/ Country"]},{"l":"Table of contents"},{"l":"Properties","p":["iso_cca2","name"]},{"i":"properties-1","l":"Properties"},{"l":"iso_cca2","p":["• iso_cca2: string","Alphanumeric, 2 character ISO code of the country."]},{"l":"Defined in","p":["types.ts:287"]},{"l":"name","p":["• name: string","English name of the country."]},{"i":"defined-in-1","l":"Defined in","p":["types.ts:281"]}],[{"l":"KycDaoInitializationResult","p":["@kycdao/kycdao-sdk - v0.2.0/ KycDaoInitializationResult","The result of the SDK initialization process.","interface KycDaoInitializationResult"]},{"l":"Table of contents"},{"l":"Properties","p":["kycDao","redirectEvent","sdkStatus"]},{"i":"properties-1","l":"Properties"},{"l":"kycDao","p":["• kycDao: KycDao","The instance of the initialized KycDao class."]},{"l":"Defined in","p":["index.ts:90"]},{"l":"redirectEvent","p":["• Optional redirectEvent: RedirectEvent","The type of RedirectEvent that was detected and handled during the initialization, if there was one."]},{"i":"defined-in-1","l":"Defined in","p":["index.ts:96"]},{"l":"sdkStatus","p":["• sdkStatus: SdkStatus","The current status of the SDK."]},{"i":"defined-in-2","l":"Defined in","p":["index.ts:102"]}],[{"l":"MintingData","p":["@kycdao/kycdao-sdk - v0.2.0/ MintingData","Data required by kycDAO to initiate NFT minting.","interface MintingData"]},{"l":"Table of contents"},{"l":"Properties","p":["disclaimerAccepted","verificationType"]},{"i":"properties-1","l":"Properties"},{"l":"disclaimerAccepted","p":["• disclaimerAccepted: boolean","Was the disclaimer about the kycDAO NFTs accepted by the user? Has to be true or the minting request will fail."]},{"l":"Defined in","p":["types.ts:389"]},{"l":"verificationType","p":["• Optional verificationType: AccreditedInvestor| KYC","The user has to be verified for this verification type to be able to have a token minted. The KycDao.checkVerificationStatus method can be used to query/poll the kycDao server and check for the verification status. The verification type determines which smart contract will be used for the minting. It defaults to KYC when left undefined for backward compatibility reasons.","default KYC"]},{"i":"defined-in-1","l":"Defined in","p":["types.ts:399"]}],[{"l":"PersonaOptions","p":["@kycdao/kycdao-sdk - v0.2.0/ PersonaOptions","Options related to the Persona verification flow.","interface PersonaOptions"]},{"l":"Table of contents"},{"l":"Methods","p":["onCancel","onComplete","onError"]},{"i":"methods-1","l":"Methods"},{"l":"onCancel","p":["▸ Optional onCancel(): void","This callback is called when an user cancels the inquiry flow before completion."]},{"l":"Returns","p":["void"]},{"l":"Defined in","p":["types.ts:347"]},{"l":"onComplete","p":["▸ Optional onComplete(): void","This callback is called when the inquiry has completed the inquiry flow and the user clicks on the complete button to close the flow."]},{"i":"returns-1","l":"Returns","p":["void"]},{"i":"defined-in-1","l":"Defined in","p":["types.ts:353"]},{"l":"onError","p":["▸ Optional onError( error): void","This callback is called in response to errors in the inquiry flow that prevent the inquiry flow from being usable. These generally occur on initial load."]},{"l":"Parameters","p":["Name","Type","error","string"]},{"i":"returns-2","l":"Returns","p":["void"]},{"i":"defined-in-2","l":"Defined in","p":["types.ts:359"]}],[{"l":"SdkConfiguration","p":["@kycdao/kycdao-sdk - v0.2.0/ SdkConfiguration","Configuration parameters required for instantiating the SDK object.","interface SdkConfiguration"]},{"l":"Table of contents"},{"l":"Properties","p":["apiKey","baseUrl","demoMode","enabledBlockchainNetworks","enabledVerificationTypes","environment","evmProvider"]},{"i":"properties-1","l":"Properties"},{"l":"apiKey","p":["• Optional apiKey: string","CURRENTLY UNUSED Optional API key used to identify the client initializing the SDK."]},{"l":"Defined in","p":["types.ts:121"]},{"l":"baseUrl","p":["• baseUrl: string","The base API URL of the kycDAO server to connect to. For integration/testing use https://staging.kycdao.xyz For production use https://kycdao.xyz"]},{"i":"defined-in-1","l":"Defined in","p":["types.ts:147"]},{"l":"demoMode","p":["• Optional demoMode: boolean","Switch for enabling demo mode. Demo mode is intended to be more conveninet for demonstrating (and also developing) the integration with kycDAO. It removes some verification and minting restrictions so the same wallet/user can be used multiple times to start/finish the flows.","default false"]},{"i":"defined-in-2","l":"Defined in","p":["types.ts:139"]},{"l":"enabledBlockchainNetworks","p":["• Optional enabledBlockchainNetworks: ( EthereumMainnet| EthereumRinkeby| PolygonMainnet| PolygonMumbai| NearTestnet| NearMainnet)[]","List of BlockchainNetworks to be available to use. This can influence what third party providers will get initialized. As a rule of thumb test networks will be available when connecting to a kycDAO test server and main networks when connecting to the kycDAO production server (see baseUrl).","If undefined, all networks available on the configured kycDAO server will be enabled."]},{"i":"defined-in-3","l":"Defined in","p":["types.ts:157"]},{"l":"enabledVerificationTypes","p":["• enabledVerificationTypes: ( AccreditedInvestor| KYC)[]","List of VerificationTypes to be available to use. This can influence what third party providers will get initialized."]},{"i":"defined-in-4","l":"Defined in","p":["types.ts:164"]},{"l":"environment","p":["• Optional environment: demo| test","deprecated since version 0.1.3, use demoMode switch instead.","Environment type used for influencing the behavior of the SDK.","see KycDaoEnvironments for more details."]},{"i":"defined-in-5","l":"Defined in","p":["types.ts:130"]},{"l":"evmProvider","p":["• Optional evmProvider: unknown","If there are any EVM networks enabled this object will be used as the EVM provider (i.e.: MetaMask or anything EIP-1193, EIP-2255 compatible). Existance of required methods/fields will be verified during SDK initialization."]},{"i":"defined-in-6","l":"Defined in","p":["types.ts:171"]}],[{"l":"SdkStatus","p":["@kycdao/kycdao-sdk - v0.2.0/ SdkStatus","The current status of the SDK.","interface SdkStatus"]},{"l":"Table of contents"},{"l":"Properties","p":["availableBlockchainNetworks","availableVerificationTypes","baseUrl","demoMode","evmProviderConfigured","nearNetworkConnected"]},{"i":"properties-1","l":"Properties"},{"l":"availableBlockchainNetworks","p":["• availableBlockchainNetworks: ( EthereumMainnet| EthereumRinkeby| PolygonMainnet| PolygonMumbai| NearTestnet| NearMainnet)[]","List of BlockchainNetworks currently available to use. See SdkConfiguration.enabledBlockchainNetworks"]},{"l":"Defined in","p":["types.ts:198"]},{"l":"availableVerificationTypes","p":["• availableVerificationTypes: ( AccreditedInvestor| KYC)[]","List of VerificationTypes currently available to use. See SdkConfiguration.enabledVerificationTypes"]},{"i":"defined-in-1","l":"Defined in","p":["types.ts:204"]},{"l":"baseUrl","p":["• baseUrl: string","The base API URL of the kycDAO server currently used by the SDK."]},{"i":"defined-in-2","l":"Defined in","p":["types.ts:186"]},{"l":"demoMode","p":["• demoMode: boolean","A flag indicating if demo mode is turned on or not. See SdkConfiguration.demoMode"]},{"i":"defined-in-3","l":"Defined in","p":["types.ts:192"]},{"l":"evmProviderConfigured","p":["• evmProviderConfigured: boolean","A flag indicating if an EVM provider is configured and ready to use or not. See SdkConfiguration.evmProvider"]},{"i":"defined-in-4","l":"Defined in","p":["types.ts:210"]},{"l":"nearNetworkConnected","p":["• nearNetworkConnected: null| EthereumMainnet| EthereumRinkeby| PolygonMainnet| PolygonMumbai| NearTestnet| NearMainnet","The blockchain network currently used by the SDK, null if there is none. This value will depend on the SdkConfiguration provided and the available networks on the connected kycDAO server."]},{"i":"defined-in-5","l":"Defined in","p":["types.ts:217"]}],[{"l":"ServerStatus","p":["@kycdao/kycdao-sdk - v0.2.0/ ServerStatus","Status of a kycDAO server.","interface ServerStatus"]},{"l":"Table of contents"},{"l":"Properties","p":["apiStatus","isOk","serverBaseUrl"]},{"i":"properties-1","l":"Properties"},{"l":"apiStatus","p":["• apiStatus: string","If the server status is OK it contains the current server datetime in ISO 8601 format. If it isn't it contains an error message."]},{"l":"Defined in","p":["types.ts:239"]},{"l":"isOk","p":["• isOk: boolean","Signals if the server is available and accesible or not."]},{"i":"defined-in-1","l":"Defined in","p":["types.ts:245"]},{"l":"serverBaseUrl","p":["• serverBaseUrl: string","The base API URL of the connected kycDAO server."]},{"i":"defined-in-2","l":"Defined in","p":["types.ts:232"]}],[{"l":"VerificationData","p":["@kycdao/kycdao-sdk - v0.2.0/ VerificationData","Data required by kycDAO to initiate a verification flow.","interface VerificationData"]},{"l":"Table of contents"},{"l":"Properties","p":["email","isEmailConfirmed","isLegalEntity","taxResidency","termsAccepted","verificationType"]},{"i":"properties-1","l":"Properties"},{"l":"email","p":["• email: string","Email address of the user."]},{"l":"Defined in","p":["types.ts:302"]},{"l":"isEmailConfirmed","p":["• isEmailConfirmed: boolean","Was the email address already confirmed?"]},{"i":"defined-in-1","l":"Defined in","p":["types.ts:308"]},{"l":"isLegalEntity","p":["• isLegalEntity: boolean","Is the user a legal entity or not?"]},{"i":"defined-in-2","l":"Defined in","p":["types.ts:320"]},{"l":"taxResidency","p":["• taxResidency: string","Country of tax residency. Either the English name or the ISO code of a country from the Countries list."]},{"i":"defined-in-3","l":"Defined in","p":["types.ts:314"]},{"l":"termsAccepted","p":["• termsAccepted: boolean","Were the kycDAO legal documents accepted by the user? Has to be true or verification requests will fail."]},{"i":"defined-in-4","l":"Defined in","p":["types.ts:332"]},{"l":"verificationType","p":["• verificationType: AccreditedInvestor| KYC","The selected verification type from enabledVerificationTypes specified in SdkConfiguration during initialization."]},{"i":"defined-in-5","l":"Defined in","p":["types.ts:326"]}],[{"l":"VerificationProviderOptions","p":["@kycdao/kycdao-sdk - v0.2.0/ VerificationProviderOptions","Options related to various verification providers.","interface VerificationProviderOptions"]},{"l":"Table of contents"},{"l":"Properties","p":["personaOptions"]},{"i":"properties-1","l":"Properties"},{"l":"personaOptions","p":["• Optional personaOptions: PersonaOptions","Options related to the Persona."]},{"l":"Defined in","p":["types.ts:374"]}],[{"l":"Flow"},{"i":"httpsswimlanesioufsamtz3wf","l":"https://swimlanes.io/u/FsaMtz3wf"},{"i":"#","p":["_: 1. Issue Verification","_: 2. Gating","...: Wait for minting","Host page --> SDK: Set up service","Host page --> SDK: Start verification","Host page -> Host page: Show kycNFT","Host page -> NTNFT Contract: Mint through NEAR wallet","Host page -> SDK: get kycNFT details","Host page -> SDK: Initiate identity verification","Host page -> SDK: kycNFT exist?","Host page -> SDK: return tx ID","Host page -> User: Do you want to get verified?","Host page -> User: Gather required data","Host page -> User: Ready to mint?","kycDAO backend --> SDK: Authorized to mint","kycDAO backend --> SDK: IDV process success","kycDAO backend --> SDK: User clear to proceed","kycDAO backend -> kycDAO backend: internal database check (blocklist etc.)","kycDAO backend -> NTNFT Contract: Authorize wallet address","NOTE Hostpage should share keys to SDK","NOTE Information required before minting => NFT image selection signed disclaimer","NOTE Information required to initiate verification => verified email, tax residency, entity type, verification type, tier type, ToS+PP","NTNFT Contract --> kycDAO backend: Authorized.","NTNFT Contract --> SDK: No","NTNFT Contract --> SDK: Yes/No","SDK --> Host page: Authorized to mint","SDK --> Host page: No","SDK --> Host page: share detiails (JS object)","SDK --> Host page: User clear to proceed","SDK --> Host page: Yes/No","SDK -> kycDAO backend: Authorize minting","SDK -> kycDAO backend: return tx ID","SDK -> kycDAO backend: send signature + address + network","SDK -> kycDAO backend: wait for callback from IDV provider","SDK -> NTNFT Contract: kycNFT exist on this wallet address?","SDK -> SDK: Load IDV provider","SDK -> User: Identity Verification","Title: SDK for KYC DAO","User --> Host page: Let's roll.","User --> Host page: Mint successful (return tx ID)","User --> Host page: Yes.","User -> Host page: Connect Wallet","User -> Host page: Login attempt","User -> Host page: Shares data","User -> SDK: finalize identity verification","User <-- NTNFT Contract: Receive kycNFT + validity + tier"]}]]