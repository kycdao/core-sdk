import { struct } from '@solana/buffer-layout';
import { AccountMeta, PublicKey, TransactionInstruction } from '@solana/web3.js';
import { publicKey, str } from './utils';

// kycDao contract specific code
// Generated by anchor-client-gen

export interface MintAndFreezeNftArgs {
  creatorKey: PublicKey;
  uri: string;
  title: string;
}

export interface MintAndFreezeNftAccounts {
  mintAuthority: PublicKey;
  mint: PublicKey;
  tokenProgram: PublicKey;
  metadata: PublicKey;
  tokenAccount: PublicKey;
  tokenMetadataProgram: PublicKey;
  payer: PublicKey;
  systemProgram: PublicKey;
  rent: PublicKey;
}

const layout = struct<MintAndFreezeNftArgs>([publicKey('creatorKey'), str('uri'), str('title')]);

export function mintAndFreezeNft(
  programId: PublicKey,
  args: MintAndFreezeNftArgs,
  accounts: MintAndFreezeNftAccounts,
) {
  const keys: Array<AccountMeta> = [
    { pubkey: accounts.mintAuthority, isSigner: true, isWritable: true },
    { pubkey: accounts.mint, isSigner: false, isWritable: true },
    { pubkey: accounts.tokenProgram, isSigner: false, isWritable: false },
    { pubkey: accounts.metadata, isSigner: false, isWritable: true },
    { pubkey: accounts.tokenAccount, isSigner: false, isWritable: true },
    {
      pubkey: accounts.tokenMetadataProgram,
      isSigner: false,
      isWritable: false,
    },
    { pubkey: accounts.payer, isSigner: false, isWritable: true },
    { pubkey: accounts.systemProgram, isSigner: false, isWritable: false },
    { pubkey: accounts.rent, isSigner: false, isWritable: false },
  ];
  const identifier = Buffer.from([76, 20, 55, 47, 114, 174, 128, 255]);
  const buffer = Buffer.alloc(10000);
  const len = layout.encode(
    {
      creatorKey: args.creatorKey,
      uri: args.uri,
      title: args.title,
    },
    buffer,
  );
  const data = Buffer.concat([identifier, buffer]).slice(0, 8 + len);
  return new TransactionInstruction({ keys, programId: programId, data });
}
